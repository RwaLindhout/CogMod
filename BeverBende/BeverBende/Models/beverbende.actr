;(sgp :v nil :esc t :lf 0.4 :bll 0.5 :ans 0.5 :rt 0 :ncnar nil)

;(sgp :show-focus t)

;Sla per positie per speler op wat de upper en lower waarde kunnen zijn en wat avg is.
;(chunk-type card player position lower upper avg)
;Goal chunk houdt de status van de game bij. Maar ook de score van het model en de 3 tegenstanders voor deze ronde
;Dat is dus de schatting van de waarde voor jezelf en de drie andere spelers.
;(chunk-type goal state model-score opp1 opp2 opp3)
;PROBLEM: Hoe ga je bijhouden wat de geschatte waarden van de opponents zijn. Model is inactive namelijk gedurende de beurten van de andere spelers.
;          Dit zul je dus waarschijnlijk via swift moeten fixen

;SWIFT: Deze chunk is alleen voor het begin van het spel aangezien je dan meekrijgt wat je meest linker en rechter kaart zijn
;(chunk-type start-info left right)
;SWIFT: Get the value of the disard card and the first drawn card, then you can decide.
;If the draw the special card where you can go twice, this chunk will be requested from swift repeatedly.
;(chunk-type moves discard draw)

(add-dm
(player1 isa card player 0 position 0 lower 0 upper 9 avg 5)
(player2 isa card player 0 position 1 lower 0 upper 9 avg 5)
(player3 isa card player 0 position 2 lower 0 upper 9 avg 5)
(player4 isa card player 0 position 3 lower 0 upper 9 avg 5)
(opp11 isa card player 1 position 0 lower 0 upper 9 avg 5)
(opp12 isa card player 1 position 1 lower 0 upper 9 avg 5)
(opp13 isa card player 1 position 2 lower 0 upper 9 avg 5)
(opp14 isa card player 1 position 3 lower 0 upper 9 avg 5)
(opp21 isa card player 2 position 0 lower 0 upper 9 avg 5)
(opp22 isa card player 2 position 1 lower 0 upper 9 avg 5)
(opp23 isa card player 2 position 2 lower 0 upper 9 avg 5)
(opp24 isa card player 2 position 3 lower 0 upper 9 avg 5)
(opp31 isa card player 3 position 0 lower 0 upper 9 avg 5)
(opp32 isa card player 3 position 1 lower 0 upper 9 avg 5)
(opp33 isa card player 3 position 2 lower 0 upper 9 avg 5)
(opp34 isa card player 3 position 3 lower 0 upper 9 avg 5)

(goal isa goal) (count) (counting)(my-turn)(start-game)
(clear-imaginal)(look-at-cards)(compare-discard)(compare-draw)
(goal isa goal state start-game)
)

(set-all-baselevels -100 10)

(goal-focus goal)

;Helemaal aan het begin van de game zul je naar je twee buitenste kaarten moeten kijken
;Dit komt mee vanuit swift in de vorm van een start-info chunk

;########Initialize Model ###########

(p init
=goal>
isa       goal
state     start-game
==>
=goal>
isa       goal
state     start-game2
+action>
isa       test
var       69
)

;At the very beginning of the game we look at our two outer cards. And these are saved in declarative memory.
(p start-game
=goal>
isa       goal
state     start-game2
=action>
isa       start-info
left      =pos0
right     =pos3
;  ?imaginal>
;      buffer    empty
;      state     free
==>
=goal>
isa       goal
state     look-at-cards
=action>
+imaginal>
isa       card
player    0
position  0
lower     nil     ;set to nill indicating that we know the values rather than just an estimate
upper     nil
avg       =pos0
)


;Here we look at the second card and then wait for our turn, so hand over control to the app.
(p look-at-cards
=goal>
isa       goal
state     look-at-cards
=action>
isa       start-info
left      =pos0
right     =pos3
;   ?imaginal>
;      buffer    empty
;      state     free
==>
=goal>
isa       goal
state     wait-for-turn                ;TODO staat aanpassen na process-history zodra dat werkt
+imaginal>
isa       card
player    0
position  3
lower     nil     ;set to nill indicating that we know the values rather than just an estimate
upper     nil
avg       =pos3
-imaginal>
+action>
isa       moves                        ;TODO staat aanpassen na process-history zodra dat werkt
)

;######## Start of Turn ###########

(p start-turn-discard-empty
=goal>
isa         goal
state       wait-for-turn
=action>
isa         moves
discard     nil
draw        =draw
==>
=goal>
state       compare-draw
=action>
+retrieval>
isa         card
player      0
> avg       =draw
)


(p start-my-turn
=goal>
isa         goal
state       wait-for-turn
=action>
isa           moves
- discard     nil
discard       =discard
draw          =draw
==>
=goal>
state       compare-discard
=action>   ;No strict harvesting
+retrieval>
isa         card
player      0
> avg       =draw

)



;If we were able to find a card with a higher average than the card from the discard pile in our own deck
;then we take the card from the discard pile and swap.
;We also let the app know that we made our decision, which can then be shown and we'll wait for our next turn.
(p take-discard-card
=goal>
isa         goal
state       compare-discard
=retrieval>
isa         card
player      0
position    =pos
=action>
isa         moves
discard     =discard
draw        =draw
;   ?imaginal>
;     buffer    empty
;      state     free
==>
=goal>
isa         goal
state       end-turn
+imaginal>
isa         card
player      0
position    pos
lower       nil     ;set to nill indicating that we know the values rather than just an estimate
upper       nil
avg         =discard
+action>
action      took-discard
position    =pos
value       =discard
)




;If we were unable to find a card of our own with a higher value than the discard pile we will not take
;the discard card but rather we will draw a card and look at that. So we will search for a card of our own
;with a higher value as the drawn card.
(p do-not-take-discard-card
=goal>
isa         goal
state       compare-discard
?retrieval>
state        error
=action>
isa         moves
discard     =discard
draw        =draw
==>
=goal>
isa         goal
state       compare-draw
=action>   ;No strict harvesting
+retrieval>
isa         card
player      0
> avg         =draw
)

;TODO: Hier productions toevoegen met speciale cases voor de drie speciale kaarten.


;If we found a card with a higher value than the drawn card we will swap and let the app know what we did.
;We also make a new chunk containing the updated information on which cards we check.
(p take-draw-card
=goal>
isa         goal
state       compare-draw
=retrieval>
isa         card
player      0
position    =pos
=action>
isa         moves
;      discard     =discard
draw        =draw
;  ?imaginal>
;      buffer    empty
;      state     free
==>
=goal>
isa         goal
state       end-turn
+imaginal>
isa         card
player      0
position    =pos
lower       nil     ;set to nill indicating that we know the values rather than just an estimate
upper       nil
avg         =draw
+action>
action      took-draw
position    =pos
value       =draw
)


;If we were unable to find a card with a higher score then the draw card we will discard it and end our turn.
(p do-not-take-draw-card
=goal>
isa         goal
state       compare-draw
?retrieval>
state        error
=action>
isa         moves
;     discard     =discard
draw        =draw
==>
=goal>
isa         goal
state       end-turn
+action>
action      discard-draw
value       =draw
)

;Sla per positie per speler op wat de upper en lower waarde kunnen zijn en wat avg is. 
;(chunk-type card player position lower upper avg)

;Goal chunk houdt de status van de game bij. Maar ook de score van het model en de 3 tegenstanders voor deze ronde
;Dat is dus de schatting van de waarde voor jezelf en de drie andere spelers. 
;(chunk-type goal state model-score opp1 opp2 opp3)


;SWIFT: Deze chunk is alleen voor het begin van het spel aangezien je dan meekrijgt wat je meest linker en rechter kaart zijn
;(chunk-type start-info left right)

;SWIFT: Get the value of the disard card and the first drawn card, then you can decide.
;If the draw the special card where you can go twice, this chunk will be requested from swift repeatedly. 
;(chunk-type moves discard draw)

(add-dm
 (player1 isa card player 0 position 0 lower 0 upper 9 avg 5)
 (player2 isa card player 0 position 1 lower 0 upper 9 avg 5)
 (player3 isa card player 0 position 2 lower 0 upper 9 avg 5)
 (player4 isa card player 0 position 3 lower 0 upper 9 avg 5)
 (opp11 isa card player 1 position 0 lower 0 upper 9 avg 5)
 (opp12 isa card player 1 position 1 lower 0 upper 9 avg 5)
 (opp13 isa card player 1 position 2 lower 0 upper 9 avg 5)
 (opp14 isa card player 1 position 3 lower 0 upper 9 avg 5)
 (opp21 isa card player 2 position 0 lower 0 upper 9 avg 5)
 (opp22 isa card player 2 position 1 lower 0 upper 9 avg 5)
 (opp23 isa card player 2 position 2 lower 0 upper 9 avg 5)
 (opp24 isa card player 2 position 3 lower 0 upper 9 avg 5)
 (opp31 isa card player 3 position 0 lower 0 upper 9 avg 5)
 (opp32 isa card player 3 position 1 lower 0 upper 9 avg 5)
 (opp33 isa card player 3 position 2 lower 0 upper 9 avg 5)
 (opp34 isa card player 3 position 3 lower 0 upper 9 avg 5)
 
 (goal isa goal) (count) (counting)(my-turn)(start-game)
 (clear-imaginal)(look-at-cards)(compare-discard)(compare-draw)
  (goal isa goal state start-game)
 )

;(set-all-baselevels 100 10)

(goal-focus goal)

;Helemaal aan het begin van de game zul je naar je twee buitenste kaarten moeten kijken
;Dit komt mee vanuit swift in de vorm van een start-info chunk

;########Initialize Model ###########

(p init
   =goal>
    isa       goal
    state     start-game
==>
  =goal>
    isa       goal
    state     start-game2
  +action>
    isa       test
    var       69
  )

;At the very beginning of the game we look at our two outer cards. And these are saved in declarative memory. 
(p start-game
   =goal>
      isa       goal
      state     start-game2
   =action>
      isa       start-info
      left      =pos0
      right     =pos3
==>
  =goal>
      isa       goal
      state     look-at-cards
  =action>
  +imaginal>
      isa       card
      player    0
      position  0
      lower     nil     ;set to nill indicating that we know the values rather than just an estimate
      upper     nil
      avg       =pos0
 -imaginal>
   )


;Here we look at the second card and then wait for our turn, so hand over control to the app. 
(p look-at-cards
   =goal>
      isa       goal
      state     look-at-cards
   =action>
      isa       start-info
      left      =pos0
      right     =pos3
==>
  =goal>
      isa       goal
      state     process-history				;TODO staat aanpassen na process-history zodra dat werkt
  +imaginal>
      isa       card
      player    0
      position  3
      lower     nil     ;set to nill indicating that we know the values rather than just an estimate
      upper     nil
      avg       =pos3
  -imaginal>
   +action>
      isa       history						;TODO staat aanpassen na process-history zodra dat werkt
   )

;######## History Sequence ##########


;You know the exact value of card seeing as you know the value of the discard card. (Update upper limit, lower limit & new-avg)
(p history-took-discard
    =goal>
        isa         goal
        state       process-history
    =action>
        isa         history
        action      took-discard
        player      =player
        position   =pos
        lower       nil
        upper       nil
        new-avg     =val
==>
    =goal>
        isa         goal
        state       process-history
    +imaginal>
        isa         card
        player      =player
        position    =pos
        lower       nil
        upper       nil
        avg         =val
    -imaginal>
    +action>
        action      process-history
)


;You know the upper limit of the value of a card seeing as you can see the card that was discarded for this one.
;(Update upper limit, & new-avg)
(p history-took-draw
    =goal>
        isa         goal
        state       process-history
    =action>
        isa         history
        action      took-draw
        player      =player
        position   =pos
       lower       =lower
        upper       =upper
        new-avg     =val
==>
    =goal>
        isa         goal
        state       process-history
    +imaginal>
        isa         card
        player      =player
        position    =pos
        lower       =lower
        upper       =upper
        avg         =val
    -imaginal>
    +action>
        action      process-history
)



;Deze productie moet of 4 keer worden aangeroepen of moet vier kaarten meerkijgen aangezien je bij een discard drwa concludeerd dat alle kaarten lager zijn dan dat.
;Here you know that all 4 cards are lower than the discarded card presumably. So you repeat this production four time.
;We can update the upper limit of a card. (Update upper limit, & new-avg)
(p history-discard-draw
    =goal>
        isa         goal
        state       process-history
    =action>
        isa         history
        action      discard-draw
        player      =player
        position   =pos
        lower       =lower
        upper       =upper
        new-avg     =val
==>
    =goal>
        isa         goal
        state       process-history
    +imaginal>
        isa         card
        player      =player
        position    =pos
        lower       =lower
        upper       =upper
        avg         =val
    -imaginal>
    +action>
        action      process-history
)

(p history-processing-done
    =goal>
        isa         goal
        state       process-history
    =action>
        isa         history
        action      done
==>
    =goal>
        isa         goal
        state       wait-for-turn
    +action>
        isa      my-turn
)


 ;######## Start remember sequence ###########
;We try to retrieve the four cards in our hands and we then let SWIFT tell us what the highest and lowest values are.
;This way we reinforce our memories of our cards but it also allows us to forget wich card is stored where seeing as we retrieve them separately.

( p start-remember-sequence
    =goal>
        isa           goal
        state         wait-for-turn
    =action>
        isa           my-turn                 ;Waarden zijn nog niet van belang hier.
==>
    =goal>
        state         remember1
    =action>          ;No strict harvesting
    +retrieval>
        isa         card
        player      0
        position    0
)

(p remember-first-card
    =goal>
     isa         goal
     state       remember1
    =retrieval>
     isa         card
     position    0
     avg         =val
==>
    +imaginal>
     pos0        =val
    =goal>
     isa         goal
     state       remember2
    +retrieval>
     isa         card
     player      0
     position    1
)

(p remember-second-card
    =goal>
        isa         goal
        state       remember2
    =retrieval>
        isa         card
        position    1
        avg         =val
    =imaginal>
       pos0        =aanwezig
==>
    =imaginal>
        pos1        =val
    =goal>
        isa         goal
        state       remember3
    +retrieval>
        isa         card
        player      0
        position    2
)

(p remember-third-card
    =goal>
        isa         goal
        state       remember3
    =retrieval>
        isa         card
        position    2
        avg         =val
    =imaginal>
        pos0        =aanwezig
        pos1        =aanwezig2
==>
    =imaginal>
        pos2        =val
    =goal>
        isa         goal
        state       remember4
    +retrieval>
        isa         card
        player      0
        position    3
)

(p remember-fourth-card
    =goal>
        isa         goal
        state       remember4
    =retrieval>
        isa         card
        position    3
        avg         =val
    =imaginal>
        pos0        =aanwezig
        pos1        =aanwezig2
        pos2        =aanwezig3
==>
    =imaginal>
        pos3        =val
    =goal>
        isa         goal
        state       let-swift-rank
    +action>
        move        compare-cards
        pos0        =aanwezig
        pos1        =aanwezig2
        pos2        =aanwezig3
        pos3        =val
)

(p get-ranked-cards
    =goal>
        isa         goal
        state       let-swift-rank
    =imaginal>
        pos0        =value1
        pos1        =value2
        pos2        =value3
        pos3        =value4
    =action>
        move        compare-cards
        pos0        =value1
        pos1        =value2
        pos2        =value3
        pos3        =value4
        min         =lowest
        min-pos     =low-pos
        max         =highest
        max-pos     =high-pos
        sum         =sum
==>
    =goal>
        isa         goal
        state       request-beverbende
    =imaginal>
        min         =lowest
        max         =highest
        min-pos     =low-pos
        max-pos     =high-pos
        sum         =sum
;  +action>
;       isa         moves
)

 ;######### Does the model want to call beverbende? ########

(p do-i-wanna-call-beverbende
    =goal>
        isa         goal
        state       request-beverbende
    =imaginal>
        sum         =val
==>
    =goal>
        isa         goal
        state       compare-beverbende
    +action>
        isa          beverbende
        total        =val
)

(p beverbende
    =goal>
        isa         goal
        state       compare-beverbende
    =action>
        isa         beverbende
        choice      yes
==>
    =goal>
        isa         goal
        state       end-turn
    +action>
        action      beverbende
)

(p do-not-call-beverbende
    =goal>
        isa         goal
        state       compare-beverbende
    =action>
        isa         beverbende
        choice      no
==>
    =goal>
        isa         goal
        state       start-turn
    +action>
        action      moves
)


 ;######## Start of turn ###########

(p start-turn-discard-empty
    =goal>
        isa         goal
        state       start-turn
    =action>
        isa         moves
        discard     nil
        draw        =draw
    =imaginal>
        min         =lowest
        max         =highest
==>
    =goal>
        state       compare-draw
    =action>
    =imaginal>
)

(p start-my-turn
    =goal>
        isa           goal
        state         start-turn
    =action>
        isa           moves
        - discard     nil
        discard       =discard
        draw          =draw
    =imaginal>
        min         =lowest
        max         =highest
==>
    =goal>
        state         compare-discard
    =action>          ;No strict harvesting
    =imaginal>
)


(p take-discard-card
   =goal>
      isa         goal
      state       compare-discard
   =imaginal>
      max         =max
      max-pos     =max-pos
   =action>
      isa         moves
      discard     =discard
    < discard     =max
==>
  =goal>
      isa         goal
      state       end-turn
-imaginal>
+imaginal>                                                ;#### Gaat dit goed, want die andere troep zit ook nog in de imaginal buffer.
      isa         card
      player      0
      position    =max-pos
      lower       nil     ;set to nill indicating that we know the values rather than just an estimate
      upper       nil
      avg         =discard
  +action>
      action      took-discard
      position    =max-pos
      value       =discard
  )


(p do-not-take-discard-card
    =goal>
      isa         goal
      state       compare-discard
    =action>
      isa         moves
      discard     =discard
      draw        =draw
    =imaginal>
      max         =max
    =action>
      isa         moves
      discard     =discard
    >= discard     =max
==>
  =goal>
      isa         goal
      state       compare-draw
   =action>       ;No strict harvesting
   =imaginal>
  )


(p take-draw-card
    =goal>
        isa         goal
        state       compare-draw
    =imaginal>
        max         =max
        max-pos     =max-pos
    =action>
        isa         moves
        draw        =draw
      < draw        =max
      - draw        sneak-peek
      - draw        swap

==>
    =goal>
        isa         goal
        state       end-turn
    -imaginal>                          ;#### Gaat dit goed, want die andere troep zit ook nog in de imaginal buffer.
    +imaginal>
        isa         card
        player      0
        position    =max-pos
        lower       nil     ;set to nill indicating that we know the values rather than just an estimate
        upper       nil
        avg         =draw
    +action>
        action      took-draw
        position    =max-pos
        value       =draw
  )


;If we were unable to find a card with a higher score then the draw card we will discard it and end our turn. 
(p do-not-take-draw-card
    =goal>
        isa         goal
        state       compare-draw
    =imaginal>
        max         =max
        max-pos     =max-pos
    =action>
        isa         moves
        draw        =draw
        >= draw        =max
        - draw      sneak-peek
        - draw      swap
==>
    =goal>
        isa         goal
        state       end-turn
    +action>
        action      discard-draw
        value       =draw
  )



;############# Sneak peek Sequence #############

(p compare-draw-sneak-peak
    =goal>
        isa             goal
        state           compare-draw
    =action>
        isa             moves               ;Discard is no longer important seeing as you have already decided not to use that.
        draw            sneak-peek                    ;Draw card has to be a sneak-peak card
==>
    =goal>
        state           find-card-to-peek
    =action>        ;No strict harvesting
    +retrieval>
        isa             card
        player          0
        - upper         nil                         ;Limits should not be nil, indidcating that we aren't sure
        - lower         nil

)

;You could not find a card which you without certainty, then we will look at a random card
(p no-peek-card-found
    =goal>
        state       find-card-to-peek
    ?retrieval>
        state        error
==>
    =goal>
        state       peek-at-card
    +action>
        action      peek
        position    random            ;Let swift randomly select one of your own four cards to look at if you cannot find a proper card.
)


;We found a card that we are uncertain of and we then turn control over to swift such that it will get that value for us.
(p peek-card-found
    =goal>
        state           find-card-to-peek
    =retrieval>
        isa             card
        position        =pos            ;player us niet nodig aangezien swift wel weet wanneer dit aangeroepen wordt
        - lower         nil            ;Deze tetst zijn eigenlijk overbodig, maar voor de zekerheid even toegevoegd.
        - upper         nil
==>
    =goal>
        state           peek-at-card
    +action>
        action          peek
        position        =pos
)

(p update-card-after-peak
    =goal>
        state       peek-at-card
    =action>
        action      peek
        position    =pos
        value       =val
==>
    =goal>
        state       wait-for-turn
    +imaginal>
        isa         card
        player      0
        position    =pos
        lower       nil     ;set to nill indicating that we know the values rather than just an estimate
        upper       nil
        avg         =val
    +action>
        action      peek-done
        position    =pos
)

;############# Swap Sequence ###########


; 1. Model trekt swap kaart
; 2. Model vraagt via DM op welke kaart de hoogste waarde heeft. Ik weet niet of je een max waarde op kunt vragen, anders moet dit wellicht via Swift, maar ik weet nog niet hoe.
; 3a. Ofwel: Model vraagt een kaart op met de laagste geschatte waarde voor de tegenstanders. Ik weet niet of dit kan, maar dan vraag je dus een kaart met de laagste waarde en speler is niet 0 op.
; 3b. Of: Model vraagt kaart op waarvoor geldt dat die lager is dan je eigen hoogste waarde uit stap 2 en waarvoor geldt dat positie niet speler 0 is.
; 4. Als je een kaart gevonden hebt die aan de voorwaarden voldoet dan swap je en zo niet dan speel je hem af. Hier zijn dus twee productions voor nodig.


(p compare-draw-swap
    =goal>
        isa             goal
        state           compare-draw
    =action>
        isa             moves                   ;Discard is no longer important seeing as you have already decided not to use that.
        draw            swap                    ;Draw card has to be a sneak-peak card
    =imaginal>
        max             =max
        max-pos         =max-pos
==>
    =goal>
        state           compare-swap
    =action>
    =imaginal>
    +action>
        action          find-swap

)

(p update-own-card-swap
    =goal>
        isa             goal
        state           compare-swap
    =action>
        isa             swap
        player          =player
        position        =position
        value           =value
    =imaginal>
        max             =max
        max-pos         =max-pos
        > max           =value
==>
    =goal>
        state           update-opponent-card
    -imaginal>
    +imaginal>
        isa             card                    ;update our own hand first
        player          0
        position        =max-pos
        upper           nil
        lower           nil
        avg             =value
    =action>
        old-pos         =max-pos
        old-val         =max

)

(p discard-swap
    =goal>
        isa             goal
        state           compare-swap
    =action>
        isa             swap
        player          =player
        position        =position
        value           =value
    =imaginal>
        max             =max
        max-pos         =max-pos
        <= max           =value
==>
    =goal>
        state           wait-for-turn
    +action>
        action          discard-swap

)

(p update-opponent-card-swap
    =goal>
        isa             goal
        state           update-opponent-card
    =action>
        isa             swap
        player          =player
        position        =position
        value           =value
        old-pos         =max-pos
        old-val         =max
==>
    =goal>
        state           wait-for-turn
    -imaginal>
    +imaginal>
        isa             card                    ;update our own hand first
        player          =player
        position        =position
        upper           nil
        lower           nil
        avg             =max
    +action>
        isa             took-swap
        player1         0
        pos1            =max-pos
        player2         =player
        pos2            =position
)
